
TrafficLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001383  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  00001c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b32  00000000  00000000  0000254d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00003080  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000756  00000000  00000000  0000384d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  74:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_app>:
uint8_t bitState=LOW;
uint8_t mode=NORMAL_MODE;

void init_app(void)
{
	BUTTON_init(PORT_D,2);      //button configuration/int0
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	84 e4       	ldi	r24, 0x44	; 68
  80:	0e 94 2e 01 	call	0x25c	; 0x25c <BUTTON_init>
	
	//initialize cars' LEDS using PORTA
	LED_init(PORT_A,0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	LED_init(PORT_A,1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	LED_init(PORT_A,2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	
	//initialize pedestrian mode LEDS using PORTB
	LED_init(PORT_B,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	LED_init(PORT_B,1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	LED_init(PORT_B,2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	82 e4       	ldi	r24, 0x42	; 66
  b0:	0e 94 32 01 	call	0x264	; 0x264 <LED_init>
	
	//interrupt configuration
	enable_global_interrupt();
  b4:	0e 94 9b 02 	call	0x536	; 0x536 <enable_global_interrupt>
	interrupt_sense_risingEdge ();
  b8:	0e 94 9f 02 	call	0x53e	; 0x53e <interrupt_sense_risingEdge>
	enable_external_INT0();
  bc:	0e 94 a3 02 	call	0x546	; 0x546 <enable_external_INT0>
	
	//TIMER configuration
	timer0_init();
  c0:	0e 94 a7 02 	call	0x54e	; 0x54e <timer0_init>
  c4:	08 95       	ret

000000c6 <start_app>:
}

void start_app(void)
{
  c6:	0f 93       	push	r16
	switch (mode)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	88 23       	and	r24, r24
  ce:	19 f0       	breq	.+6      	; 0xd6 <start_app+0x10>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	41 f1       	breq	.+80     	; 0x124 <start_app+0x5e>
  d4:	9a c0       	rjmp	.+308    	; 0x20a <start_app+0x144>
	{
		case NORMAL_MODE:      //normal mode when no interrupt takes place
		LED_ON(PORT_A,0);     //green led is on
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		timer0_start();
  de:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
	    timer0_stop(overflow_5sec);   //delay of 5 sec
  e2:	84 e1       	ldi	r24, 0x14	; 20
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		LED_OFF(PORT_A,0);   //green led is off
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>

		blink_1led(5,PORT_A,1);   //yellow led blinks for 5 sec
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	61 e4       	ldi	r22, 0x41	; 65
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <blink_1led>
		
		LED_ON(PORT_A,2);     //red led is on
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		timer0_start();
 104:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_5sec);   //delay of 5 sec
 108:	84 e1       	ldi	r24, 0x14	; 20
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		LED_OFF(PORT_A,2);     //red led is off
 110:	62 e0       	ldi	r22, 0x02	; 2
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>

		blink_1led(5,PORT_A,1);     //yellow led blinks for 5 sec
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	61 e4       	ldi	r22, 0x41	; 65
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <blink_1led>
		break;
 122:	73 c0       	rjmp	.+230    	; 0x20a <start_app+0x144>

		case PEDESTRIAN_MODE:   //when crosswalk button is pressed once we enter pedestrian mode
		disable_global_interrupt();		//to avoid any changes when button is pressed twice in a row
 124:	0e 94 9d 02 	call	0x53a	; 0x53a <disable_global_interrupt>
		DIO_read(PORT_A, 2, &bitState);   //read the current state of pin2 in portA (state of red light)
 128:	41 e6       	ldi	r20, 0x61	; 97
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_read>
		if (bitState==HIGH)   //if red light is on
 134:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <bitState>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	b9 f4       	brne	.+46     	; 0x16a <start_app+0xa4>
		{
			LED_ON(PORT_B,0);   //pedestrian green light is on
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	82 e4       	ldi	r24, 0x42	; 66
 140:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
			LED_ON(PORT_A,2);	//cars' red light is on
 144:	62 e0       	ldi	r22, 0x02	; 2
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
			timer0_start();
 14c:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
			timer0_stop(overflow_5sec);   //delay of 5 sec
 150:	84 e1       	ldi	r24, 0x14	; 20
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
			LED_OFF(PORT_B,0);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	82 e4       	ldi	r24, 0x42	; 66
 15c:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
			LED_OFF(PORT_A,2);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
 168:	27 c0       	rjmp	.+78     	; 0x1b8 <start_app+0xf2>
		}
		else{
			LED_ON(PORT_B,2);    //red pedestrian is on
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
			timer0_start();
 172:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
			timer0_stop(overflow_5sec);   //delay of 5 sec
 176:	84 e1       	ldi	r24, 0x14	; 20
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
			LED_OFF(PORT_B,2);    //red pedestrian is off
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
			LED_OFF(PORT_A,0);	//green cars is off
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
			blink_2leds(5,PORT_A,PORT_B,1,1);   //both yellow blink for 5 sec
 18e:	01 e0       	ldi	r16, 0x01	; 1
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	42 e4       	ldi	r20, 0x42	; 66
 194:	61 e4       	ldi	r22, 0x41	; 65
 196:	85 e0       	ldi	r24, 0x05	; 5
 198:	0e 94 ff 02 	call	0x5fe	; 0x5fe <blink_2leds>

			LED_ON(PORT_B,0);    //green pedestrian is on
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
			LED_ON(PORT_A,2);	//red car is on
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
			timer0_start();
 1ac:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
			timer0_stop(overflow_5sec);   //delay of 5 sec
 1b0:	84 e1       	ldi	r24, 0x14	; 20
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		}
		LED_OFF(PORT_A,2);	//red car is off
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		blink_2leds(5,PORT_A,PORT_B,1,1);   //both yellow blink for 5 sec
 1c0:	01 e0       	ldi	r16, 0x01	; 1
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	42 e4       	ldi	r20, 0x42	; 66
 1c6:	61 e4       	ldi	r22, 0x41	; 65
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	0e 94 ff 02 	call	0x5fe	; 0x5fe <blink_2leds>
		LED_OFF(PORT_B,0);    //green pedestrian is off
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	82 e4       	ldi	r24, 0x42	; 66
 1d2:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		LED_ON(PORT_B,2);		//pedestrian red led is on
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		LED_ON(PORT_A,0);		//cars' green led is on
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		timer0_start();
 1e6:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_5sec);   //delay of 5 sec
 1ea:	84 e1       	ldi	r24, 0x14	; 20
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		LED_OFF(PORT_B,2);		//pedestrian red led is off 34an nroo7 ll normal mode
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	82 e4       	ldi	r24, 0x42	; 66
 1f6:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		LED_OFF(PORT_A,0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		enable_global_interrupt();    //enable interrupts for future button presses
 202:	0e 94 9b 02 	call	0x536	; 0x536 <enable_global_interrupt>
		mode=NORMAL_MODE;    //return to normal mode flow
 206:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
	}
}
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <__vector_1>:

ISR(EXT_INT0_vect){
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	mode=PEDESTRIAN_MODE;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	start_app();
 236:	0e 94 63 00 	call	0xc6	; 0xc6 <start_app>
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <BUTTON_init>:
 */ 

#include "button.h"

void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin){
	DIO_init(buttonPort,buttonPin,IN);      //since button is an input device
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
 262:	08 95       	ret

00000264 <LED_init>:
 */ 

#include "led.h"

void LED_init(uint8_t ledPort,uint8_t ledPin){ //led is an output device
	DIO_init(ledPort,ledPin,OUT);	 //since led is an output device
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
 26a:	08 95       	ret

0000026c <LED_ON>:
}

void LED_ON(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);  
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_write>
 272:	08 95       	ret

00000274 <LED_OFF>:
}

void LED_OFF(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_write>
 27a:	08 95       	ret

0000027c <main>:

#include "APPLICATION/app.h"

int main(void)
{
	init_app();
 27c:	0e 94 3e 00 	call	0x7c	; 0x7c <init_app>
	while (1){
		start_app();
 280:	0e 94 63 00 	call	0xc6	; 0xc6 <start_app>
 284:	fd cf       	rjmp	.-6      	; 0x280 <main+0x4>

00000286 <DIO_init>:
		break;
		case PORT_C:
		PORTC ^=(1<<pinNumber);
		break;
		case PORT_D:
		PORTD ^=(1<<pinNumber);
 286:	82 34       	cpi	r24, 0x42	; 66
 288:	31 f1       	breq	.+76     	; 0x2d6 <DIO_init+0x50>
 28a:	18 f4       	brcc	.+6      	; 0x292 <DIO_init+0xc>
 28c:	81 34       	cpi	r24, 0x41	; 65
 28e:	39 f0       	breq	.+14     	; 0x29e <DIO_init+0x18>
 290:	08 95       	ret
 292:	83 34       	cpi	r24, 0x43	; 67
 294:	e1 f1       	breq	.+120    	; 0x30e <DIO_init+0x88>
 296:	84 34       	cpi	r24, 0x44	; 68
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_init+0x16>
 29a:	54 c0       	rjmp	.+168    	; 0x344 <DIO_init+0xbe>
 29c:	08 95       	ret
 29e:	41 11       	cpse	r20, r1
 2a0:	0c c0       	rjmp	.+24     	; 0x2ba <DIO_init+0x34>
 2a2:	2a b3       	in	r18, 0x1a	; 26
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_init+0x28>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_init+0x24>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	8a bb       	out	0x1a, r24	; 26
 2b8:	08 95       	ret
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_init+0x3a>
 2be:	5c c0       	rjmp	.+184    	; 0x378 <DIO_init+0xf2>
 2c0:	2a b3       	in	r18, 0x1a	; 26
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_init+0x46>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_init+0x42>
 2d0:	82 2b       	or	r24, r18
 2d2:	8a bb       	out	0x1a, r24	; 26
 2d4:	08 95       	ret
 2d6:	41 11       	cpse	r20, r1
 2d8:	0c c0       	rjmp	.+24     	; 0x2f2 <DIO_init+0x6c>
 2da:	27 b3       	in	r18, 0x17	; 23
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_init+0x60>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_init+0x5c>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	87 bb       	out	0x17, r24	; 23
 2f0:	08 95       	ret
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <DIO_init+0x72>
 2f6:	40 c0       	rjmp	.+128    	; 0x378 <DIO_init+0xf2>
 2f8:	27 b3       	in	r18, 0x17	; 23
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_init+0x7e>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_init+0x7a>
 308:	82 2b       	or	r24, r18
 30a:	87 bb       	out	0x17, r24	; 23
 30c:	08 95       	ret
 30e:	41 11       	cpse	r20, r1
 310:	0c c0       	rjmp	.+24     	; 0x32a <DIO_init+0xa4>
 312:	24 b3       	in	r18, 0x14	; 20
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_init+0x98>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_init+0x94>
 322:	80 95       	com	r24
 324:	82 23       	and	r24, r18
 326:	84 bb       	out	0x14, r24	; 20
 328:	08 95       	ret
 32a:	41 30       	cpi	r20, 0x01	; 1
 32c:	29 f5       	brne	.+74     	; 0x378 <DIO_init+0xf2>
 32e:	24 b3       	in	r18, 0x14	; 20
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_init+0xb4>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_init+0xb0>
 33e:	82 2b       	or	r24, r18
 340:	84 bb       	out	0x14, r24	; 20
 342:	08 95       	ret
 344:	41 11       	cpse	r20, r1
 346:	0c c0       	rjmp	.+24     	; 0x360 <DIO_init+0xda>
 348:	21 b3       	in	r18, 0x11	; 17
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_init+0xce>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_init+0xca>
 358:	80 95       	com	r24
 35a:	82 23       	and	r24, r18
 35c:	81 bb       	out	0x11, r24	; 17
 35e:	08 95       	ret
 360:	41 30       	cpi	r20, 0x01	; 1
 362:	51 f4       	brne	.+20     	; 0x378 <DIO_init+0xf2>
 364:	21 b3       	in	r18, 0x11	; 17
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_init+0xea>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_init+0xe6>
 374:	82 2b       	or	r24, r18
 376:	81 bb       	out	0x11, r24	; 17
 378:	08 95       	ret

0000037a <DIO_write>:
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	31 f1       	breq	.+76     	; 0x3ca <DIO_write+0x50>
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_write+0xc>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	39 f0       	breq	.+14     	; 0x392 <DIO_write+0x18>
 384:	08 95       	ret
 386:	83 34       	cpi	r24, 0x43	; 67
 388:	e1 f1       	breq	.+120    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 38a:	84 34       	cpi	r24, 0x44	; 68
 38c:	09 f4       	brne	.+2      	; 0x390 <DIO_write+0x16>
 38e:	54 c0       	rjmp	.+168    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 390:	08 95       	ret
 392:	41 11       	cpse	r20, r1
 394:	0c c0       	rjmp	.+24     	; 0x3ae <DIO_write+0x34>
 396:	2b b3       	in	r18, 0x1b	; 27
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_write+0x28>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_write+0x24>
 3a6:	80 95       	com	r24
 3a8:	82 23       	and	r24, r18
 3aa:	8b bb       	out	0x1b, r24	; 27
 3ac:	08 95       	ret
 3ae:	41 30       	cpi	r20, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_write+0x3a>
 3b2:	5c c0       	rjmp	.+184    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3b4:	2b b3       	in	r18, 0x1b	; 27
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_write+0x46>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_write+0x42>
 3c4:	82 2b       	or	r24, r18
 3c6:	8b bb       	out	0x1b, r24	; 27
 3c8:	08 95       	ret
 3ca:	41 11       	cpse	r20, r1
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <DIO_write+0x6c>
 3ce:	28 b3       	in	r18, 0x18	; 24
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_write+0x60>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_write+0x5c>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	88 bb       	out	0x18, r24	; 24
 3e4:	08 95       	ret
 3e6:	41 30       	cpi	r20, 0x01	; 1
 3e8:	09 f0       	breq	.+2      	; 0x3ec <DIO_write+0x72>
 3ea:	40 c0       	rjmp	.+128    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_write+0x7e>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_write+0x7a>
 3fc:	82 2b       	or	r24, r18
 3fe:	88 bb       	out	0x18, r24	; 24
 400:	08 95       	ret
 402:	41 11       	cpse	r20, r1
 404:	0c c0       	rjmp	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	08 95       	ret
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	29 f5       	brne	.+74     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 422:	25 b3       	in	r18, 0x15	; 21
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	85 bb       	out	0x15, r24	; 21
 436:	08 95       	ret
 438:	41 11       	cpse	r20, r1
 43a:	0c c0       	rjmp	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43c:	22 b3       	in	r18, 0x12	; 18
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	82 bb       	out	0x12, r24	; 18
 452:	08 95       	ret
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	51 f4       	brne	.+20     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 458:	22 b3       	in	r18, 0x12	; 18
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	82 bb       	out	0x12, r24	; 18
 46c:	08 95       	ret

0000046e <DIO_read>:
		break;
	}
}
void DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t* value)  //read dio
{
	switch(portNumber)
 46e:	82 34       	cpi	r24, 0x42	; 66
 470:	01 f1       	breq	.+64     	; 0x4b2 <DIO_read+0x44>
 472:	18 f4       	brcc	.+6      	; 0x47a <DIO_read+0xc>
 474:	81 34       	cpi	r24, 0x41	; 65
 476:	39 f0       	breq	.+14     	; 0x486 <DIO_read+0x18>
 478:	08 95       	ret
 47a:	83 34       	cpi	r24, 0x43	; 67
 47c:	81 f1       	breq	.+96     	; 0x4de <DIO_read+0x70>
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	09 f4       	brne	.+2      	; 0x484 <DIO_read+0x16>
 482:	43 c0       	rjmp	.+134    	; 0x50a <DIO_read+0x9c>
 484:	08 95       	ret
	{
		case PORT_A:
		*value= (PINA &(1<<pinNumber)) >> pinNumber;
 486:	79 b3       	in	r23, 0x19	; 25
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	9c 01       	movw	r18, r24
 48e:	06 2e       	mov	r0, r22
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_read+0x28>
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	0a 94       	dec	r0
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_read+0x24>
 49a:	87 2f       	mov	r24, r23
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	82 23       	and	r24, r18
 4a0:	93 23       	and	r25, r19
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_read+0x3a>
 4a4:	95 95       	asr	r25
 4a6:	87 95       	ror	r24
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_read+0x36>
 4ac:	fa 01       	movw	r30, r20
 4ae:	80 83       	st	Z, r24
		break;
 4b0:	08 95       	ret
		case PORT_B:
		*value= (PINB &(1<<pinNumber)) >> pinNumber;
 4b2:	76 b3       	in	r23, 0x16	; 22
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	9c 01       	movw	r18, r24
 4ba:	06 2e       	mov	r0, r22
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_read+0x54>
 4be:	22 0f       	add	r18, r18
 4c0:	33 1f       	adc	r19, r19
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_read+0x50>
 4c6:	87 2f       	mov	r24, r23
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	82 23       	and	r24, r18
 4cc:	93 23       	and	r25, r19
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_read+0x66>
 4d0:	95 95       	asr	r25
 4d2:	87 95       	ror	r24
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_read+0x62>
 4d8:	fa 01       	movw	r30, r20
 4da:	80 83       	st	Z, r24
		break;
 4dc:	08 95       	ret
		case PORT_C:
		*value= (PINC &(1<<pinNumber)) >> pinNumber;
 4de:	73 b3       	in	r23, 0x13	; 19
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9c 01       	movw	r18, r24
 4e6:	06 2e       	mov	r0, r22
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_read+0x80>
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_read+0x7c>
 4f2:	87 2f       	mov	r24, r23
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	82 23       	and	r24, r18
 4f8:	93 23       	and	r25, r19
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_read+0x92>
 4fc:	95 95       	asr	r25
 4fe:	87 95       	ror	r24
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_read+0x8e>
 504:	fa 01       	movw	r30, r20
 506:	80 83       	st	Z, r24
		break;
 508:	08 95       	ret
		case PORT_D:
		*value= (PIND &(1<<pinNumber)) >> pinNumber;
 50a:	70 b3       	in	r23, 0x10	; 16
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	9c 01       	movw	r18, r24
 512:	06 2e       	mov	r0, r22
 514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_read+0xac>
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_read+0xa8>
 51e:	87 2f       	mov	r24, r23
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	82 23       	and	r24, r18
 524:	93 23       	and	r25, r19
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_read+0xbe>
 528:	95 95       	asr	r25
 52a:	87 95       	ror	r24
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_read+0xba>
 530:	fa 01       	movw	r30, r20
 532:	80 83       	st	Z, r24
 534:	08 95       	ret

00000536 <enable_global_interrupt>:
#include "interrupts.h"

void enable_global_interrupt(void)
{
	//SREG|=(1<<7);    //enable globall interrupts by setting bit I; bit7 y3ny
	sei();
 536:	78 94       	sei
 538:	08 95       	ret

0000053a <disable_global_interrupt>:
}
void disable_global_interrupt(void){
	cli();
 53a:	f8 94       	cli
 53c:	08 95       	ret

0000053e <interrupt_sense_risingEdge>:
}

void interrupt_sense_risingEdge (void)
{
	//MCUCR = (1<<ISC01) | 1<<ISC00;
	MCUCR |= (1<<1)|(1<<0);     //interrupt sense:rising edge of INT0
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	83 60       	ori	r24, 0x03	; 3
 542:	85 bf       	out	0x35, r24	; 53
 544:	08 95       	ret

00000546 <enable_external_INT0>:
	
}

void enable_external_INT0(void)
{
	GICR |=(1<<6);		//external interupt0 enable
 546:	8b b7       	in	r24, 0x3b	; 59
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	8b bf       	out	0x3b, r24	; 59
 54c:	08 95       	ret

0000054e <timer0_init>:
	LED_OFF(portNumber2,pinNumber2);

}

void timer0_init(void){
	TCCR0 =0x00;		//normal mode
 54e:	13 be       	out	0x33, r1	; 51
	TCNT0 =0x0C;		//set timer initial value to 12
 550:	8c e0       	ldi	r24, 0x0C	; 12
 552:	82 bf       	out	0x32, r24	; 50
 554:	08 95       	ret

00000556 <timer0_start>:
}
void timer0_start(void){
	overflowCounter=0;
 556:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 55a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>
	TCCR0 |=(1<<0)|(1<<2);		//start timer with pre-scalar value=1024
 55e:	83 b7       	in	r24, 0x33	; 51
 560:	85 60       	ori	r24, 0x05	; 5
 562:	83 bf       	out	0x33, r24	; 51
 564:	08 95       	ret

00000566 <timer0_stop>:
}

void timer0_stop(unsigned int NumbOfOverflows)
{
 566:	ac 01       	movw	r20, r24
	while(overflowCounter < NumbOfOverflows){
 568:	10 c0       	rjmp	.+32     	; 0x58a <timer0_stop+0x24>
		while((TIFR &(1<<0))== 0);	//busy wait l7d ma el overflow y7sl y3ny l7d ma el overflow bit/flag==1
 56a:	08 b6       	in	r0, 0x38	; 56
 56c:	00 fe       	sbrs	r0, 0
 56e:	fd cf       	rjmp	.-6      	; 0x56a <timer0_stop+0x4>
		TIFR|=(1<<0);   //lazm a3ml clear ll overflow flag b3d kol overflow ezay? by writing on it
 570:	98 b7       	in	r25, 0x38	; 56
 572:	91 60       	ori	r25, 0x01	; 1
 574:	98 bf       	out	0x38, r25	; 56
		overflowCounter++;
 576:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <overflowCounter>
 57a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <overflowCounter+0x1>
 57e:	2f 5f       	subi	r18, 0xFF	; 255
 580:	3f 4f       	sbci	r19, 0xFF	; 255
 582:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <overflowCounter+0x1>
 586:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <overflowCounter>
	TCCR0 |=(1<<0)|(1<<2);		//start timer with pre-scalar value=1024
}

void timer0_stop(unsigned int NumbOfOverflows)
{
	while(overflowCounter < NumbOfOverflows){
 58a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <overflowCounter>
 58e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <overflowCounter+0x1>
 592:	24 17       	cp	r18, r20
 594:	35 07       	cpc	r19, r21
 596:	48 f3       	brcs	.-46     	; 0x56a <timer0_stop+0x4>
		while((TIFR &(1<<0))== 0);	//busy wait l7d ma el overflow y7sl y3ny l7d ma el overflow bit/flag==1
		TIFR|=(1<<0);   //lazm a3ml clear ll overflow flag b3d kol overflow ezay? by writing on it
		overflowCounter++;
	}
	overflowCounter=0;
 598:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 59c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>
	TCCR0= 0x00;		//timer stop
 5a0:	13 be       	out	0x33, r1	; 51
 5a2:	08 95       	ret

000005a4 <blink_1led>:
*  Author: Mariam
*/
#include "timer.h"
unsigned int overflowCounter=0;

void blink_1led(uint8_t Seconds,uint8_t portNumber,uint8_t pinNumber){  //blink function
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	08 2f       	mov	r16, r24
 5ae:	16 2f       	mov	r17, r22
 5b0:	d4 2f       	mov	r29, r20
	for(uint8_t i=0;i<Seconds;i++){
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	19 c0       	rjmp	.+50     	; 0x5e8 <blink_1led+0x44>
		overflowCounter=0;
 5b6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 5ba:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>
		LED_ON(portNumber,pinNumber);
 5be:	6d 2f       	mov	r22, r29
 5c0:	81 2f       	mov	r24, r17
 5c2:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		
		timer0_start();
 5c6:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_halfsec);
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		
		LED_OFF(portNumber,pinNumber);
 5d2:	6d 2f       	mov	r22, r29
 5d4:	81 2f       	mov	r24, r17
 5d6:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		
		timer0_start();
 5da:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_halfsec);
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
*/
#include "timer.h"
unsigned int overflowCounter=0;

void blink_1led(uint8_t Seconds,uint8_t portNumber,uint8_t pinNumber){  //blink function
	for(uint8_t i=0;i<Seconds;i++){
 5e6:	cf 5f       	subi	r28, 0xFF	; 255
 5e8:	c0 17       	cp	r28, r16
 5ea:	28 f3       	brcs	.-54     	; 0x5b6 <blink_1led+0x12>
		LED_OFF(portNumber,pinNumber);
		
		timer0_start();
		timer0_stop(overflow_halfsec);
	}
	overflowCounter=0;
 5ec:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 5f0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <blink_2leds>:

void blink_2leds(uint8_t Seconds,uint8_t portNumber1,uint8_t portNumber2, uint8_t pinNumber1, uint8_t pinNumber2){
 5fe:	ef 92       	push	r14
 600:	ff 92       	push	r15
 602:	0f 93       	push	r16
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	e8 2e       	mov	r14, r24
 60c:	16 2f       	mov	r17, r22
 60e:	d4 2f       	mov	r29, r20
 610:	f2 2e       	mov	r15, r18
	for(uint8_t i=0;i<Seconds;i++){
 612:	c0 e0       	ldi	r28, 0x00	; 0
 614:	21 c0       	rjmp	.+66     	; 0x658 <blink_2leds+0x5a>
		overflowCounter=0;
 616:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 61a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>

		LED_ON(portNumber1,pinNumber1);
 61e:	6f 2d       	mov	r22, r15
 620:	81 2f       	mov	r24, r17
 622:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		LED_ON(portNumber2,pinNumber2);
 626:	60 2f       	mov	r22, r16
 628:	8d 2f       	mov	r24, r29
 62a:	0e 94 36 01 	call	0x26c	; 0x26c <LED_ON>
		timer0_start();
 62e:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_halfsec);
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
		
		LED_OFF(portNumber1,pinNumber1);
 63a:	6f 2d       	mov	r22, r15
 63c:	81 2f       	mov	r24, r17
 63e:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		LED_OFF(portNumber2,pinNumber2);
 642:	60 2f       	mov	r22, r16
 644:	8d 2f       	mov	r24, r29
 646:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
		timer0_start();
 64a:	0e 94 ab 02 	call	0x556	; 0x556 <timer0_start>
		timer0_stop(overflow_halfsec);
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 b3 02 	call	0x566	; 0x566 <timer0_stop>
	}
	overflowCounter=0;
}

void blink_2leds(uint8_t Seconds,uint8_t portNumber1,uint8_t portNumber2, uint8_t pinNumber1, uint8_t pinNumber2){
	for(uint8_t i=0;i<Seconds;i++){
 656:	cf 5f       	subi	r28, 0xFF	; 255
 658:	ce 15       	cp	r28, r14
 65a:	e8 f2       	brcs	.-70     	; 0x616 <blink_2leds+0x18>
		LED_OFF(portNumber1,pinNumber1);
		LED_OFF(portNumber2,pinNumber2);
		timer0_start();
		timer0_stop(overflow_halfsec);
	}
	overflowCounter=0;
 65c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflowCounter+0x1>
 660:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflowCounter>

	LED_OFF(portNumber1,pinNumber1);
 664:	6f 2d       	mov	r22, r15
 666:	81 2f       	mov	r24, r17
 668:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>
	LED_OFF(portNumber2,pinNumber2);
 66c:	60 2f       	mov	r22, r16
 66e:	8d 2f       	mov	r24, r29
 670:	0e 94 3a 01 	call	0x274	; 0x274 <LED_OFF>

}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
